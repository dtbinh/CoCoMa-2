convois-own [incoming-queue
  finished? ; Is the goal reached ?
  leader?   ; car leading the convoi convoi
  to-protect? ; Should this car be protected at all cost ?
  genlongpath? ; Should the leader compute a new path (but not shortest) ?
  dead?
  vision
  speed maxdir ; maximal speed of a car, and max angle
  last-send-time ; communication historical time-stamp
  life ; Current health points
  side ; red or blue
  beliefs 
  intentions
  hit?
  lost-leader? ; Did our leader die ?
  need-new-path?
  ]

to setup-convois
  if nb-cars > 0 [
    ; get the size of the base to deploy the car accordingly
    let base-min-pxcor min [pxcor] of (patches with [hangar? and pzcor = mapAlt])
    let base-max-pxcor max [pxcor] of (patches with [hangar? and pzcor = mapAlt])
    let base-min-pycor min [pycor] of (patches with [hangar? and pzcor = mapAlt])
    let base-max-pycor max [pycor] of (patches with [hangar? and pzcor = mapAlt])

    ; creation des voitures du convoi et cortege
    create-convois nb-cars
    ask convois
    [
      ; Init apparence NetLogo
      set shape "car"
      set color magenta

      ; Init des structures BDI
      set incoming-queue [] ; Do not change

      ; Init vars convois
      set speed 0.05 * simu-speed
      set maxdir 10 * simu-speed
      set vision convois-vision
      set heading 0
      set roll 0
      set pitch 0
      set finished? false
      set leader? false
      set to-protect? false
      set genlongpath? false
      set dead? false
      set life max-convois-life
      set side "blue"
      set beliefs []
      set intentions []
      set hit? false
      set lost-leader? false
      set need-new-path? false
      ; Visu
      set label who ; display the car names
    ]

    ; get the id of the first one
    let first-car min [who] of convois
    let last-car max [who] of convois

    ; configure the leader
    ask convoi first-car [
      set leader? true
      set color orange
      move-to patch base-max-pxcor base-max-pycor 1
    ]

    ; La voiture a proteger sera la voiture du milieu
    ask convoi ( [who] of convoi last-car / 2 ) [
      set to-protect? true
      set color yellow
    ]

    ; deploying the other car
    if nb-cars > 1 [
      ; ask non leader cars
      ask turtle-set sort-on [who] convois with [who > first-car]
      [
        ; we create a link between them
        create-convoi-link-to turtle (who - 1)
        ;if who >= 4 and who mod 2 = 0 [ create-convoi-link-with turtle (who - 3) ]

        ; deploying
        ifelse (who - 1) mod 2 = 0 [ set xcor base-min-pxcor ] [ set xcor base-max-pxcor ] ; a gauche ou a droite selon le nombre (pair ou impair respectivement)
        set ycor base-max-pycor - (floor (who / 2) / (nb-cars / 2) * (base-max-pycor - base-min-pycor)) ; d'une rangee de plus en plus basse toutes les deux voitures
        set zcor solAlt
      ]
    ]
    
  ]
end


;;; Procedure principale de gestion des convois
to convois-think

  
  if nb-cars > 0 [
    ask convois with [dead?] [
      let out sort-on [who] out-link-neighbors
      let in sort-on [who] in-link-neighbors
      
      if not (out = []) and not (in = []) [
        ask item 0 in [ create-convoi-link-to item 0 out ]
      ]
      ask my-links [die]
    ]
    

    ask convois with [ not dead? ] [
      check-if-hit ; On regarde si on s'est fait tirer dessus
      check-if-leader-died ; On regarde si notre leader est mort
      turtle-look ; On regarde autour
      convois-com-info ; On lit les message d'observation
      
      if leader? [ ; Si je suis leader
       convois-leader-responsibilities ; Je fait des trucs de leader
      ]
      convois-com-orders ; On ecoute si on a reçu des ordres
      execute-intentions ; J'ai probablement un truc à faire, donc je le fait
    ]
    
    calcul-astar
    deplacement-leader-astar
    deplacement-cortege
    
  ]
end

;;; Si on s'est fait attaquer, ajouter un belief 'hit'
to check-if-hit 
  if hit? [
   set hit? false
   maj-belief-turtle create-belief "hit" ( list who ticks )
  ]
end

;;; Si notre leader est mort, ajouter un belief 'leader died'
to check-if-leader-died
  if lost-leader? [
    show "dead leader"
    set lost-leader? false
    maj-belief-turtle create-belief "leader died" ( list who ticks )
  ]
end

;@@@@@@@@@@@@@@@@@@@@
;    COMMUNICATIONS
;@@@@@@@@@@@@@@@@@@@@

;;; Communications convois
to convois-com-info
  ; D'abord on ecoute
  listen-inform-messages
  ; Apres on parle
  convois-send-beliefs
end


;;; Envoyer nos beliefs
to convois-send-beliefs
  ; J'envoi mes beliefs a mon convois
  let receivers remove who get-my-convoi []
  ; Si je suis leader, je les envois aussi au drone et aux autres leaders
  if leader? [
     set receivers sentence receivers [who] of ( turtles with [ (breed = convois or breed = drones) and (leader?) and (who != [who] of myself) ] )
  ]
  
  let msg add-multiple-receivers receivers add-content (list "beliefs" beliefs) create-message "inform"
  ; show msg
  send msg
end

;;; Renvoi le convoi auquel apartient l'appelant
;;; Doit etre appeler avec une liste vide et retourne une liste d'id
to-report get-my-convoi [team] 
  if not member? who team [
    set team lput who team
  ]
  let neightbors (turtle-set out-link-neighbors in-link-neighbors)
  ask neightbors with [ not member? who team] [
    set team remove-duplicates sentence team get-my-convoi team
  ]
  report team
end

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;    ELECTION LEADER ET SEPARATION
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

;;; Si quelqu'un s'est fait tirer dessus, séparation
to convois-leader-responsibilities
  ;if (nb-separations > 0 ) [ stop ]
  foreach beliefs [ ; Si quelqu'un s'es fait tirer dessus : DISPERTION !
     if first ? = "hit" and nb-separations < 1 [
      separate
      set nb-separations ( nb-separations + 1 ) ; mais juste une fois
      stop
    ]
    if first ? = "leader died" and nb-elections < 1 [
      elect-new-leader
      set nb-elections ( nb-elections + 1 )
      stop
    ] 
  ]
end

;;; Envoyer un CFP pour élire un leader et se séparer
to send-cfp-separate
  show "sending cfp"
  let receivers remove who get-my-convoi []
  send add-multiple-receivers receivers add-content (list "separate") create-message "cfp"
end

;;; Envoyer un CFP pour élire un leader
to send-cfp-elect-leader
  show "sending cfp elect"
  let receivers remove who get-my-convoi []
  send add-multiple-receivers receivers add-content (list "elect-leader") create-message "cfp"
end

to wait-and-see 
end

;;; Choisir meilleur leader et se séparer
to separate
  add-intention "get-best-leader-and-separate" "true"
  add-intention "wait-and-see" timeout_expired 3
  add-intention "send-cfp-separate" "true"
end

;;; Choisir meilleur leader et envoyer messages
to get-best-leader-and-separate
  let best get-best-propose "separate"
  if best = nobody [ stop ]
  show (word "And The Chosen One Is ............ " best "  !!!!!")
  send add-content (list "separate") add-receiver best create-message "accept-proposal"
  
  
  ifelse convois-protect? [ ; Si je n'ai pas le convois important, je prend mon temps
    set genlongpath? false
    set need-new-path? true
    show "LONG PATH FALSE"
  ]
  [
    set genlongpath? true
    set need-new-path? true
    show "LONG PATH TRUE"
  ]
 
end

to elect-new-leader
  add-intention "get-best-leader" "true"
  add-intention "wait-and-see" timeout_expired 3
  add-intention "send-cfp-elect-leader" "true"
 
end

;;; Choisir meilleur leader
to get-best-leader
  show "get-best-leader"
  let best get-best-propose "elect-leader"
  if best = nobody [ stop ] ; best = who
  show (word "New leader because old one's dead ............ " best "  !!!!!")
  send add-content (list "lead") add-receiver best create-message "accept-proposal"
  
end

;;; Choisir meilleure réponse
to-report get-best-propose [cfp-type]
  let response get-message-filter "propose" cfp-type
  let best nobody
  let maxi 0
  foreach response [
   let val item 1 get-content ?
   if val > maxi [
     set best get-sender ?
     set maxi val
   ]
  ]
  report best
end

;@@@@@@@@@@@@@@@@@@@@
;    COM ORDERS
;@@@@@@@@@@@@@@@@@@@@

to convois-com-orders
  foreach get-message-filter "cfp" "separate" [ convois-receive-cfp ? ] ; Je reçois mes cfp
  foreach get-message-filter "cfp" "elect-leader" [ convois-receive-cfp ? ]
  foreach get-message-filter "accept-proposal" "separate" [ convois-accept-lead-and-separate ] ; Je reçois mes accept-proposal
  foreach get-message-filter "accept-proposal" "lead" [ convois-accept-lead (get-sender-turtle ?)] ; Je reçois mes accept-proposal
end

;;; Recevoir un CFP
to convois-receive-cfp [message]
  ;show "received cfp"
  let content get-content message
  let sender get-sender message
  if first content = "separate" [
    send add-receiver sender add-content ( list "separate" good-leader? ) create-message "propose"
   ;show "responded to cfp"
  ]
  if first content = "elect-leader" [
    send add-receiver sender add-content ( list "elect-leader" good-leader? ) create-message "propose"
    show "responded to cfp elect-leader"
  ]
end

to-report good-leader?
  ; Evidement faudra mettre quelque chose de plus peritent
  let res life
  if to-protect? [ set res ( res - 50 ) ]
  report res
end

to convois-accept-lead-and-separate
  ; Je viens d'etre choisi nouveau leader
  show "I'm in charge now !"
  set leader? true ; Je deviens leader
  set color orange
  ask my-out-links [ die ] ;
  
  ifelse convois-protect? [ ; Si je n'ai pas le convois important, je prend mon temps
    set genlongpath? false
    set need-new-path? true
    show "LONG PATH FALSE"
  ]
  [
    set genlongpath? true
    set need-new-path? true
    show "LONG PATH TRUE"
  ]
end

to-report convois-protect?
  let convois-protect false
  foreach get-my-convoi [] [
    if [to-protect?] of turtle ? [ ; Si voiture à protéger
      report true
    ]
  ]
  report false
end

to convois-accept-lead [old-leader]
  ; Je viens d'etre choisi nouveau leader
  show "I'm in charge now !"
  set leader? true ; Je deviens leader
  set color orange
  
  ask old-leader [
    set leader? false
    set color magenta
  ]
  
    
  ; set first car
  let first-car-bool false
  let first-car convoi who
  let last-car convoi who
  show first-car
  
  ; find first out-link and in-link
  let out sort-on [who] out-link-neighbors
  let in sort-on [who] in-link-neighbors
  
  if not (out = []) [
    set last-car item 0 out
  ]
  ; find first car
  while [not first-car-bool] [
    ifelse out = []
      [ set first-car-bool true ]
      [ set first-car item 0 out
        set out sort-on [who] [out-link-neighbors] of item 0 out
      ]
  ]
  ; si première voiture du convois n'est pas moi-même, créér lien
  if not (first-car = convoi who) [
    ask my-links [die]
    ask first-car [ create-convoi-link-to myself ]
    ask item 0 in [ create-convoi-link-to last-car ]
  ]
end

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;
;                                                                    CODE FOURNI
;
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



to calcul-astar 
  let first-car min [who] of convois
    ; Calcul du plan AStar pour chaque leader si necessaire
    foreach sort-on [who] turtle-set convois with [leader? and not finished? and not dead?] [
      let id ([who] of ?) - first-car
      ; Recalcule le chemin si nécessaire (par exemple au début de la simulation ou quand le convoi se sépare)
      ; Note: on est oblige de le faire en dehors du ask sinon on ne peut pas acceder a tous les patchs
      if empty? as-path or length as-path < (id + 1) or empty? (item id as-path) or [need-new-path?] of ? [ ; s'il n'y a pas encore de chemin du tout, ou pas de chemin pour cette voiture, on cree un plan AStar
        ; Cree le plan AStar (attention a ca que le patch start soit au niveau ou il y a les obstacles, ici pzcor = mapAlt pour les obstacles)
        let start-patch min-one-of (patches with [pzcor = mapAlt and not obstacle?]) [distance ?] ; on s'assure de choisir comme patch de depart un patch libre sans obstacle, sinon quand on split un convoi il se peut qu'il soit sur un obstacle et qu'il ne puisse jamais generer de chemin
        let new-path plan-astar ([patch-at 0 0 (pzcor * -1)] of start-patch) (one-of patches with [objectif?]) ([genlongpath?] of ?)
        ; S'il n'y a pas de plan et qu'on a essayé de trouver un long chemin, on attend la prochaine iteration et on reessaie mais avec un plan court
        if empty? new-path and [genlongpath?] of ? [ ask ? [ set genlongpath? false ] ]
        ; S'il n'y a pas deja une entree pour cette voiture on la cree
        ifelse length as-path < (id + 1) [
          set as-path lput new-path as-path
        ]
        ; Sinon on remplace l'entree pour cette voiture par le nouveau plan
        [
          set as-path replace-item id as-path new-path
        ]
      ]
    ]
end

to deplacement-leader-astar
  
    let first-car min [who] of convois

    ; Deplacement des leaders sur le chemin AStar
    ask convois with [leader? and not finished? and not dead?] [ ; Tant qu'on n'a pas atteint le but
      ; voi-naive ; deplacement naif sans AStar

      ; Recupere le plan AStar
      let my-as-path item (who - first-car) as-path
      if not empty? my-as-path [
        ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
        let next-patch first my-as-path
        let zz pzcor
        set next-patch [patch-at 0 0 (zz - pzcor)] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
        ; Deplacement vers le prochain waypoint
        if next-patch != patch-here [move-convoi next-patch false false]
        ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
        if patch-here = next-patch [
          set my-as-path remove-item 0 my-as-path
          set as-path replace-item (who - first-car) as-path my-as-path
          if debug [ show (word "Waypoint atteint: " patch-here ", prochain: " next-patch ) ]
        ]
      ]

      ; Critere d'arret: on est a cote de l'objectif
      check-convoi-finished
    ]
end

to deplacement-cortege
    ; Deplacement des voitures-cortege: elles ne font que suivre la voiture devant eux (avec laquelle elles sont liées)
    ask convois with [not leader? and not finished? and not dead?] [
      ifelse any? my-out-convoi-links [
        move-convoi ([patch-here] of one-of out-convoi-link-neighbors) true true
      ]
      ; S'il n'y a pas de lien devant, c'est probablement que la voiture est morte, donc on devient leader
      [
        show "My leader died..."
        set leader? true
        set lost-leader? true
        if not to-protect? [ set color orange ]
      ]
    ]
  
end

to-report detect-obstacle
 if any? other patches in-cone 10 60 with [obstacle?] [report true]
; if any? other patches in-cone 10 90 [report true]
; if any? other patches in-cone 3 270 [report true]
 report false
end

to turn-away
   ;let free-patches neighbors with [not any? patches ]
   ;if any? free-patches [face one-of free-patches]
   rt random 10 - 5
end

to check-convoi-finished
  ; Critere d'arret: on est a cote de l'objectif
  ; Note: on veut etre a cote de l'objectif et pas directement dessus car on est une voiture, donc il se peut qu'on tourne indefiniment autour sans arriver directement a arriver dessus a cause de la limite d'angle de rotation.
  if any? [neighbors6-nowrap with [objectif?]] of patch-here [ ; On ne bouge pas si on est arrive au but!
                                                               ; Fini pour le leader
    set finished? true
    ; Fini aussi pour toutes les voitures-cortege qui suivent ce leader
    let linked-cars (list in-convoi-link-neighbors)
    while [not empty? linked-cars] [ ; on fait une boucle pour recursivement mettre a finished? = true toutes les voitures liees entre elles dans ce cortege
      let next-linked-cars []
      foreach linked-cars [
        ask ? [
          set finished? true
          if any? in-convoi-link-neighbors [ ; on recupere les voitures-cortege liees a la voiture-cortege en cours
            set next-linked-cars lput in-convoi-link-neighbors next-linked-cars
          ]
        ]
      ]
      set linked-cars next-linked-cars
    ]
  ]
end

; Avancer une voiture
; Permet de faire avancer les voitures d'un convoi (cortege et leader)
; Maintien egalement une petite distance afin de ne pas "rentrer" dans la voiture de devant
to move-convoi [goal slowdown? cortege?]
  ;show (word "ici:" patch-here " goal:" goal)

  ; Calcule de l'angle avec la cible
  let headingFlag heading
  ifelse cortege?
  [ set headingFlag (towards goal) ] ; Si c'est un cortege, on veut qu'il suive toujours le leader par le chemin le plus court (surtout en play-mode ou le joueur n'est pas limite par le nowrap)
  [ set headingFlag (towards-nowrap goal) ]
  let dirCorrection subtract-headings headingFlag heading
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > maxdir [ ; limite a droite
    set dirCorrection maxdir
  ]
  [
    if dirCorrection < maxdir * -1 [ ; limite a gauche
      set dirCorrection maxdir * -1
    ]
  ]

  ; On tourne
  rt dirCorrection

  ; Limite de vitesse pour les voitures-cortege (pour pas qu'elles ne rentrent dans la voiture leader)
  let tmp-speed speed
  if slowdown? [
    if distance-nowrap goal < 1.1 [
      set tmp-speed tmp-speed / 20
    ]
    if distance-nowrap goal < 0.9 [
      set tmp-speed 0
    ]
  ]

  ; Deplacement!
  set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
  fd tmp-speed
 ; Avance
end

