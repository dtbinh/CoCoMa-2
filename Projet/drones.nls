drones-own[
 incoming-queue
 beliefs
 intentions
 fuel
 dead?
 protect ; convoy
 target ; enemy
 speed ; maxdir
 vision
 side
 hit?
 leader?
 low-fuel?
 closest-base-patch
 
 
 main-protector?
 behavior
 
 
]

to setup-drones
  if nb-drones > 0 [
    let base-min-pxcor min [pxcor] of (patches with [base? and pzcor = mapAlt])
    let base-min-pycor min [pycor] of (patches with [base? and pzcor = mapAlt])
    let base-max-pycor max [pycor] of (patches with [base? and pzcor = mapAlt])
    
    create-drones nb-drones
    ask drones [
      set beliefs []
      set intentions []
      set incoming-queue []
      set fuel max-drones-fuel
      set dead? false
      set protect nobody
      set target nobody
      set speed 0.05 * simu-speed * drones-speed-coef
      set vision drones-vision
      set side "blue"
      set shape "airplane"
      set color white
      set heading 0
      set hit? false
      set leader? false
      set low-fuel? false
      set behavior nobody
      set main-protector? false
    ]
    
    let first-drone min [who] of drones
    
    ask drone first-drone [
      set leader? true
      ifelse (who - 1) mod 2 = 0
      [ move-to patch (base-min-pxcor + 1) base-max-pycor solAlt ]
      [ move-to patch base-min-pxcor base-max-pycor solAlt ]
    ]
    
    if nb-drones > 1 [
      ask turtle-set sort-on [who] drones with [who > first-drone] [
        let rangee (base-max-pycor - base-min-pycor + 1) / (nb-drones / 2)
        ifelse (who - 1) mod 2 = 0 [ set xcor base-min-pxcor + 1 ] [ set xcor base-min-pxcor ] ; a gauche ou a droite selon le nombre (pair ou impair respectivement)
        set ycor base-max-pycor - (floor ((who - first-drone) / 2) * rangee); d'une rangee de plus en plus basse toutes les deux voitures
        set zcor solAlt
      ]
    ]
  ]
  
end


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;      BEHAVIOR ZONE
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

; Behavior sutructure : list : name run-fuction priority optional1 optional2 ....

to-report opt1 [ b ]
  
  report item 3 b
  
end

to-report opt2 [ b ]
  
  report item 4 b
  
end

to-report opt3 [ b ]
  
  report item 5 b
  
end

to set-opt [index value]
  
  set behavior replace-item (2 + index) behavior value
  
end

to-report priority [ b ]
  
  report item 2 b
  
end


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;      DRONES-BEHAVIOR LOOP
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


to drones-self-loop
  
  if behavior = nobody [
    set-behavior orbit-behavior min-one-of turtles with [breed = convois] [distance-nowrap myself]  7 ; not the best thing to do
    ;Ask leader for orders
  ]
  
  if need-to-refuel [ 
    set-behavior refuel-behavior
  ]
  
  if main-protector? [
    ; If my-convois is under attack
    ; Destroy the guy attacking it
  ]
  
  ifelse leader?[
    
  ][
    
  ]
  
  run-behavior
  
end


to run-behavior  
    run item 1 behavior  
end

to set-behavior [ new-behavior ]
  if behavior = nobody or  ( priority behavior ) <= ( priority new-behavior ) [
   
    set behavior new-behavior  
    
  ]
  
end

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;          ORBIT BEHAVIOR
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


to-report orbit-behavior [ atra opt-distance ] ; opt1 : attracter , opt2 : optimal distance to attracter , opt3 : current angle
  
  let angle ( acos ( abs (  ( [ycor] of atra )  - ( ycor ) ) / ( distance-nowrap atra ) ) )
  
  report (list "B-orbit" "orbit" 2 atra opt-distance angle); current angle ?
  
end

to orbit
  
  
  ask geo [ 
    
    setxyz ( [xcor] of opt1 [behavior] of myself ) ( [ycor] of opt1 [behavior] of myself )  ([zcor] of myself)
    
    set heading opt3 [behavior] of myself
    
    while [( not [obstacle?] of patch-ahead 1) and ( distance-nowrap opt1 [behavior] of myself ) <= ( opt2 [behavior] of myself )][ ; While no obstacle found and distance < optimal-distance
      
      if distance-nowrap patch-ahead 1 > 2 [
         stop 
      ]
      
      fd 0.5
    ] 
    
    set zcor [zcor] of myself
  ]
  
  drone-move-to geo 
  
  if distance-nowrap geo < speed [
   set-opt 3 opt3 behavior + 15 * speed  
  ]
  
end


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;          REFUEL BEHAVIOR
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

to-report need-to-refuel
  
  let rnd random 1000
  
  if rnd < 7 [
   show "Refuel : cause RND"
   report true ; Maybe we should give a lower priority to refuelling in this case
  ]
  
  let distance-to-base distance-nowrap min-one-of patches with [base? = true] [distance-nowrap myself] ; There should be a better way
  
  if distance-to-base > ( fuel / speed ) + 15 [
    show "Refuel : cause LOW FUEL"
    report true
   ]
  
  report false
  
end


to-report refuel-behavior ; optionals : closest base patch
  
  let closest min-one-of patches with [base?] [distance-nowrap myself]
  let pat patch [pxcor] of closest [pycor] of closest zcor
  report ( list "B-refuel" "refuel" 5 pat )
  
end

to refuel
 
 drone-move-to opt1 behavior 
 
 if distance-nowrap opt1 behavior < 1 [
  
  set fuel max-drones-fuel
  set behavior nobody 
   
 ]
  
end




































;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;          NOT BEHAVIORS 
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


to drone-move-to [ tg ] ; abort-obstacles ]
  
  
  face-nowrap tg
  
  while  [obstacle?] of patch-ahead 2 [
    rt
  ]
  
  drone-move-fd
  
;  if not abort-obstacles [ 
;    drone-move-fd
;    stop
;  ]
;  
;  ask geo [
;    
;   setxyz [xcor] of myself [ycor] of myself [zcor] of myself
;   face tg
;
;   let obs-bool? false
;   let best-patch nobody
;   
;   let best-dist 0
;   
;   while [distance-nowrap tg > 2 and not obs-bool?] [
;    
;     if [obstacle?] of patch-ahead 1 [
;       set obs-bool? true
;     
;       set best-patch patch-here
;       set best-dist distance-nowrap myself
;     ]
;     fd 1
;   ]
;   
;
;   if obs-bool? = true[
;      
;    let angle 1 
;    let r true
;   
;    repeat 50 [
;   
;      setxyz [xcor] of myself [ycor] of myself [zcor] of myself
;      
;      ifelse r [ set heading ( heading + angle ) ] [ set heading ( heading - angle ) ]
;      
;      while [ not [obstacle?] of patch-ahead 1 ] [
;        fd 1
;      ]
;      
;      if distance-nowrap myself > best-dist [
;        set best-dist distance-nowrap myself
;        set best-patch patch-here
;      ]
;       set r not r
;       if r [ set angle angle + 2 ]
;    ]
;    
;    set tg best-patch
;    
;   ]
;  ]
;  
;  face-nowrap tg
;  
;  drone-move-fd
  
end

to drone-move-fd  
  
  forward speed
 
 ; if no obstacle ahead
 
 set fuel (fuel - 1) ; Should depend on speed and altitude and y direction
 drone-check-crash
 
end

to drone-check-crash
  if fuel = 0 [
    die   
  ]
end


to drones-think
  
  
  
  ;  Boucle principale des drones
  ask drones [    
    turtle-look ; On regarde autour
      drones-com-info ; On lit les message d'observation
      
      manage-fuel
      
      if leader? [ ; Si je suis leader
                   ; drones-leader-responsibilities ; Je fait des trucs de leader
      ]
      
      drones-self-loop
      
      ;drones-com-orders
      ;drones-manage-intentions
      ;drones-execute-intentions
      
  ]
end

to set-protect
  ;let nb-drones nb-convois / nb-drones
  if protect = nobody [
    foreach beliefs [ 
      if first ? = side [ 
        let tmp turtle first item 1 ?
        if [breed] of tmp = convois and [nb-protectors] of tmp < nb-drones / nb-cars [
          set protect tmp
          add-intention "hover-over-convoy" "follow-protect?"
        ]
      ]
    ]
  ]
end  

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;           COM INFOS
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

to drones-com-info
  listen-inform-messages
  drones-send-beliefs
end


to drones-send-beliefs
  ; J'envoi mes beliefs a ma flotte
  let receivers []
  foreach sort-on [who] drones[
    if ( ( distance-nowrap ? < drones-com-radius ) and ( [who] of ? != who ) ) [
      set receivers lput [who] of ? receivers
    ] 
  ]
  ; Si je suis leader, je les envois aussi au drone et aux autres leaders
  if leader? [
    set receivers sentence receivers [who] of ( turtles with [ (breed = convois or breed = drones) and (leader?) and (who != [who] of myself) ] )
  ]
  let msg add-multiple-receivers receivers add-content (list "beliefs" beliefs) create-message "inform"
  send msg
end



;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;          LEADER RESPONSIBILITIES
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


to drones-leader-responsibilities
  
end



;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;           COM ORDERS
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

to drones-com-orders
  
  
  
end


;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
;           
;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

; manage fuel
to manage-fuel
  if fuel <= 0 [
    show "I have no more fuel..."
    die
  ]
  
  if (not low-fuel?) [ set closest-base-patch min-one-of patches with [base?] [distance-nowrap myself] ]
  
  ; if low fuel, return to base to refuel
  ;if (fuel - 5) < distance-nowrap closest-base-patch [
  if fuel - distance-nowrap closest-base-patch  - 5 < 0 [
    set low-fuel? true
    face-nowrap patch [pxcor] of closest-base-patch [pycor] of closest-base-patch 1
    fd speed
    set fuel fuel - speed
    ;show fuel
  ]
  
  let pxh [pxcor] of patch-here
  let pyh [pycor] of patch-here
  ; if at base, refuel
  if low-fuel? and [base?] of patch pxh pyh 0 [
    set fuel max-drones-fuel
    show "Refilling tank..."
    set low-fuel? false
  ]
  
end

; intention to follow a convoy to protect
to-report follow-protect?
  let tmp distance-nowrap protect < drones-vision
  ifelse not tmp
  [ set protect nobody ]
  [ ask protect [ set nb-protectors nb-protectors + 1 ] ]
  report not tmp
end

to follow-protect
  if not low-fuel? [
    face-nowrap protect
    fd speed
    set fuel fuel - speed
  ]
end

to hover-over-convoy
  let rd 5
  if who mod 2 = 0 [ set rd -5 ]
  ; if convoy moves left / right rd = 5, else rd = -5 (à modifier)
  let p-ahead patch ([xcor] of protect + rd) ([ycor] of protect + rd) [zcor] of protect
  let tmp-heading heading
  face-nowrap p-ahead
  ;ask protect [ ask patches in-radius 5 with [pzcor = 0] [ set pcolor red ] ]
  fd speed
  
  ifelse heading = 355
  [ set heading 0 ]
  [ set heading tmp-heading + 5 ]
  repeat 3 [ fd speed ]
end

to drones-manage-intentions
  set-protect
end

to drones-execute-intentions
  execute-intentions
end


